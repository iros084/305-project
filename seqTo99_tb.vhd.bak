library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity seqTo99_tb is
end seqTo99_tb;

architecture tb_arch of seqTo99_tb is
    -- Component declarations
    component seqTo99 is
        port(
            clk, reset, enable : in std_logic;
            out_tens, out_ones : out std_logic_vector(3 downto 0);
            counter_digit1, counter_digit2 : out std_logic_vector(6 downto 0)
        );
    end component;

    -- Signals for test bench
    signal clk, reset, enable : std_logic := '0';
    signal out_tens, out_ones : std_logic_vector(3 downto 0);
    signal counter_digit1, counter_digit2 : std_logic_vector(6 downto 0);
begin
    -- Instantiate the unit under test (UUT)
    UUT: seqTo99
        port map (
            clk => clk,
            reset => reset,
            enable => enable,
            out_tens => out_tens,
            out_ones => out_ones,
            counter_digit1 => counter_digit1,
            counter_digit2 => counter_digit2
        );

    -- Clock process
    clk_process: process
    begin
        clk <= '0';
        wait for 5 ns; -- Adjust delay based on your clock frequency
        clk <= '1';
        wait for 5 ns;
    end process;

    -- Stimulus process
    stim_proc: process
    begin
        reset <= '1';
        enable <= '0';
        wait for 10 ns;
        reset <= '0';
        enable <= '1';

        -- You can add more test scenarios here

        wait;
    end process;
end tb_arch;
